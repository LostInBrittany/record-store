syntax = "proto3";

package recordstorepb;

import "google/protobuf/descriptor.proto";

option java_package = "fr.pierrezemb.recordstore.proto";
option java_outer_classname = "RecordStoreProtocol";
option go_package = ".;recordstorepb";

// administrative part of the container
service SchemaService {
  rpc Upsert (UpsertSchemaRequest) returns (EmptyResponse);
  rpc Stat (StatRequest) returns (StatResponse);
  rpc Get (GetSchemaRequest) returns (GetSchemaResponse);
}

// Service which allow to list and delete containers
service AdminService {
  rpc List (ListContainerRequest) returns (ListContainerResponse);
  rpc Delete (DeleteContainerRequest) returns (EmptyResponse);
  // can be used to check auth
  rpc Ping (EmptyRequest) returns (EmptyResponse);
}

// Service which manipulate records within a container
service RecordService {
  rpc Put (PutRecordRequest) returns (EmptyResponse);
  rpc Query (QueryRequest) returns (stream QueryResponse);
  rpc GetQueryPlan (QueryRequest) returns (GetQueryPlanResponse);
  rpc Delete (DeleteRecordRequest) returns (DeleteRecordResponse);
}

message DeleteRecordRequest {
  string table = 1;
  bool delete_all = 2;
  Node query_node = 3;
}

message GetQueryPlanResponse {
  string query_plan = 1;
}

message ListContainerRequest {
}

message ListContainerResponse {
  repeated string containers = 1;
}

message DeleteRecordResponse {
  int64 deleted_count = 1;
}

message UpsertSchemaRequest {
  string name = 1;
  repeated string primary_key_fields = 2;
  google.protobuf.FileDescriptorSet schema = 3;
  repeated IndexDefinition index_definitions = 4;
}

message EmptyRequest {
}

message EmptyResponse {
}

message DeleteContainerRequest {
  repeated string containers = 1;
}

message GetSchemaRequest {
  string table = 1;
}

message GetSchemaResponse {
  SchemaDescription schemas = 1;
  int64 version = 2;
}

message DeleteSchemaRequest {
  string table = 1;
}

message ListSchemaRequest {
}

message ListSchemaResponse {
  repeated SchemaDescription schemas = 1;
}

message SchemaDescription {
  string name = 1;
  google.protobuf.FileDescriptorSet schema = 2;
  string primary_key_field = 3;
  repeated IndexDescription indexes = 4;
}

message IndexDescription {
  string name = 1;
  string type = 2;
  IndexStatus status = 3;
}

enum IndexStatus {
  InSync = 0;
  Building = 1;
}


message StatRequest {
}

message StatResponse {
  int64 count = 1;
  int64 count_updates = 2;
}

message PutRecordRequest {
  string table = 1;
  bytes message = 2;
}

message IndexDefinition {
  string field = 1;
  IndexType index_type = 2;
}

enum IndexType {
  VALUE = 0;
  TEXT_DEFAULT_TOKENIZER = 1;
  VERSION = 2;
}

message SelfDescribedMessage {
}

message QueryRequest {
  string table = 1;
  Node query_node = 2;
  bytes continuation = 3;
  int64 resultLimit = 4;
  SortByRequest sort_by = 5;
  repeated string fields_to_return = 6;
}

message SortByRequest {
  SortByType type = 1;
  // used when Type = Value
  string field = 2;
}

enum SortByType {
  SORT_BY_OLDEST_VERSION_FIRST = 0;
  SORT_BY_NEWEST_VERSION_FIRST = 1;
  SORT_BY_VALUE = 2;
  SORT_BY_VALUE_REVERSED = 3;
}

message QueryResponse {
  bytes record = 1;
}


enum FieldOperation {

  // valid for field query
  GREATER_THAN_OR_EQUALS = 0;
  LESS_THAN_OR_EQUALS = 1;
  GREATER_THAN = 2;
  LESS_THAN = 3;
  START_WITH = 4;
  IS_EMPTY = 5;
  IS_NULL = 6;
  EQUALS = 7;
  NOT_EQUALS = 8;
  NOT_NULL = 9;
  MATCHES = 10;

  // valid for text queries
  TEXT_CONTAINS_ANY = 11;
  TEXT_CONTAINS_ALL = 12;
}

message Node {
  oneof Content {
    FieldNode field_node = 1;
    AndNode and_node = 2;
    OrNode or_node = 3;
  }
}

message FieldNode {
  string field = 1;
  FieldOperation operation = 2;
  oneof value {
    string string_value = 11;
    int32 int32_value = 12;
    int64 int64_value = 13;
    float float_value = 14;
    uint32 uint32_value = 15;
    uint64 uint64_value = 16;
    sint32 sint32_value = 17;
    sint64 sint64_value = 18;
    double double_value = 19;
    bool bool_value = 20;
    bytes bytes_value = 21;
    FieldNode fieldNode = 22;
  }

  repeated string tokens = 40;
}

message AndNode {
  repeated Node nodes = 1;
}

message OrNode {
  repeated Node nodes = 2;
}
